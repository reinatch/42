NAME = libft.a
CC = cc
CFLAGS = -Wall -Werror -Wextra
SRC = libft.c ft_isalpha.c ft_isdigit.c
OBJ = $(SRC:.c=.o)

all: $(NAME)
# r: This option means to replace or add files to the archive. If the file already exists in the archive, it will be replaced with the new file. If it doesn't exist, it will be added to the archive.
# c: This option means to create a new archive file if it doesn't exist. If the file already exists, this option will allow it to be overwritten with the new archive.
# s: This option means to write an index into the archive. This allows for faster searches within the archive and is recommended for larger archives.
# So, when you run ar rcs $(NAME) $(OBJ), the command will create a new archive file named $(NAME) if it doesn't exist, or replace it if it does. It will then add all the object files listed in $(OBJ) to the archive, and write an index for the archive. The resulting archive file will contain all the compiled functions from your library, which can be linked into other C programs.
$(NAME): $(OBJ)
	ar rcs $(NAME) $(OBJ)
# $(CC): This is a variable that holds the name of the C compiler to be used, such as gcc.
# $(CFLAGS): This is a variable that holds a list of compiler flags to be passed to the compiler. This can include things like optimization levels, warning flags, or other custom flags.
# -c: This option tells the compiler to compile the source file, but not link it into an executable. Instead, it will create an object file.
# $<: This is a special variable that holds the name of the first prerequisite in the dependency list. In this case, it refers to the name of the C source file being compiled.
# -o $@: This option tells the compiler to write the output of the compilation to a file with the given name. $@ is a special variable that holds the name of the target file, which in this case is the object file being created.
# So, when you run $(CC) $(CFLAGS) -c $< -o $@, the compiler will compile the C source file named $<, using the compiler flags specified in $(CFLAGS). It will then create an object file named $@ with the compiled code.
%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@
# rm: This is a command in Unix-like operating systems that is used to remove files.
# -f: This option tells the rm command to force the removal of the files without prompting the user for confirmation.
# $(OBJ): This is a variable that holds a list of the object files that were created during the compilation process.
# So, when you run rm -f $(OBJ), the command will remove all the object files listed in $(OBJ) without prompting for confirmation. This is useful for cleaning up the directory after compilation is complete, or when you want to force a recompilation of all the source files in your project.
clean:
	rm -f $(OBJ)
# clean: This is a target that removes all the object files generated during the compilation process.
# rm -f $(NAME): This command removes the executable file generated by the compilation process.
# So, when you run make fclean, the clean target is executed first, which removes all the object files. Then, the rm -f $(NAME) command is executed, which removes the executable file that was created by the compilation process. This leaves the directory clean of all generated files, as if the project had never been built.
fclean: clean
	rm -f $(NAME)
re: fclean all



III.3 Part 2 - Additional functions
In this second part, you must develop a set of functions that are either not in the libc,
or that are part of it but in a different form.
Some of the following functions can be useful for writing the
functions of Part 1.



Function name ft_substr
Prototype char *ft_substr(char const *s, unsigned int start,
size_t len);
Turn in files -
Parameters s: The string from which to create the substring.
start: The start index of the substring in the
string ’s’.
len: The maximum length of the substring.
Return value The substring.
NULL if the allocation fails.
External functs. malloc
Description Allocates (with malloc(3)) and returns a substring
from the string ’s’.
The substring begins at index ’start’ and is of
maximum size ’len’.

Function name ft_strjoin
Prototype char *ft_strjoin(char const *s1, char const *s2);
Turn in files -
Parameters s1: The prefix string.
s2: The suffix string.
Return value The new string.
NULL if the allocation fails.
External functs. malloc
Description Allocates (with malloc(3)) and returns a new
string, which is the result of the concatenation
of ’s1’ and ’s2’.


Function name ft_strtrim
Prototype char *ft_strtrim(char const *s1, char const *set);
Turn in files -
Parameters s1: The string to be trimmed.
set: The reference set of characters to trim.
Return value The trimmed string.
NULL if the allocation fails.
External functs. malloc
Description Allocates (with malloc(3)) and returns a copy of
’s1’ with the characters specified in ’set’ removed
from the beginning and the end of the string.
Function name ft_split
Prototype char **ft_split(char const *s, char c);
Turn in files -
Parameters s: The string to be split.
c: The delimiter character.
Return value The array of new strings resulting from the split.
NULL if the allocation fails.
External functs. malloc, free
Description Allocates (with malloc(3)) and returns an array
of strings obtained by splitting ’s’ using the
character ’c’ as a delimiter. The array must end
with a NULL pointer.
Function name ft_itoa
Prototype char *ft_itoa(int n);
Turn in files -
Parameters n: the integer to convert.
Return value The string representing the integer.
NULL if the allocation fails.
External functs. malloc
Description Allocates (with malloc(3)) and returns a string
representing the integer received as an argument.
Negative numbers must be handled.
8
Libft Your very first own library
Function name ft_strmapi
Prototype char *ft_strmapi(char const *s, char (*f)(unsigned
int, char));
Turn in files -
Parameters s: The string on which to iterate.
f: The function to apply to each character.
Return value The string created from the successive applications
of ’f’.
Returns NULL if the allocation fails.
External functs. malloc
Description Applies the function ’f’ to each character of the
string ’s’, and passing its index as first argument
to create a new string (with malloc(3)) resulting
from successive applications of ’f’.
Function name ft_striteri
Prototype void ft_striteri(char *s, void (*f)(unsigned int,
char*));
Turn in files -
Parameters s: The string on which to iterate.
f: The function to apply to each character.
Return value None
External functs. None
Description Applies the function ’f’ on each character of
the string passed as argument, passing its index
as first argument. Each character is passed by
address to ’f’ to be modified if necessary.
Function name ft_putchar_fd
Prototype void ft_putchar_fd(char c, int fd);
Turn in files -
Parameters c: The character to output.
fd: The file descriptor on which to write.
Return value None
External functs. write
Description Outputs the character ’c’ to the given file
descriptor.
9
Libft Your very first own library
Function name ft_putstr_fd
Prototype void ft_putstr_fd(char *s, int fd);
Turn in files -
Parameters s: The string to output.
fd: The file descriptor on which to write.
Return value None
External functs. write
Description Outputs the string ’s’ to the given file
descriptor.
Function name ft_putendl_fd
Prototype void ft_putendl_fd(char *s, int fd);
Turn in files -
Parameters s: The string to output.
fd: The file descriptor on which to write.
Return value None
External functs. write
Description Outputs the string ’s’ to the given file descriptor
followed by a newline.
Function name ft_putnbr_fd
Prototype void ft_putnbr_fd(int n, int fd);
Turn in files -
Parameters n: The integer to output.
fd: The file descriptor on which to write.
Return value None
External functs. write
Description Outputs the integer ’n’ to the given file
descriptor.
